// Generated by gencpp from file mapping_msgs/ObjectPositions.msg
// DO NOT EDIT!


#ifndef MAPPING_MSGS_MESSAGE_OBJECTPOSITIONS_H
#define MAPPING_MSGS_MESSAGE_OBJECTPOSITIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace mapping_msgs
{
template <class ContainerAllocator>
struct ObjectPositions_
{
  typedef ObjectPositions_<ContainerAllocator> Type;

  ObjectPositions_()
    : name()
    , positions()  {
    }
  ObjectPositions_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , positions(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _positions_type;
  _positions_type positions;





  typedef boost::shared_ptr< ::mapping_msgs::ObjectPositions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapping_msgs::ObjectPositions_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectPositions_

typedef ::mapping_msgs::ObjectPositions_<std::allocator<void> > ObjectPositions;

typedef boost::shared_ptr< ::mapping_msgs::ObjectPositions > ObjectPositionsPtr;
typedef boost::shared_ptr< ::mapping_msgs::ObjectPositions const> ObjectPositionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mapping_msgs::ObjectPositions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mapping_msgs::ObjectPositions_<ContainerAllocator1> & lhs, const ::mapping_msgs::ObjectPositions_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.positions == rhs.positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mapping_msgs::ObjectPositions_<ContainerAllocator1> & lhs, const ::mapping_msgs::ObjectPositions_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mapping_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapping_msgs::ObjectPositions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapping_msgs::ObjectPositions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapping_msgs::ObjectPositions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d2747e1cc7147808d30f00b52065469";
  }

  static const char* value(const ::mapping_msgs::ObjectPositions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d2747e1cc714780ULL;
  static const uint64_t static_value2 = 0x8d30f00b52065469ULL;
};

template<class ContainerAllocator>
struct DataType< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mapping_msgs/ObjectPositions";
  }

  static const char* value(const ::mapping_msgs::ObjectPositions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"geometry_msgs/Point[] positions\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mapping_msgs::ObjectPositions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectPositions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapping_msgs::ObjectPositions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mapping_msgs::ObjectPositions_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAPPING_MSGS_MESSAGE_OBJECTPOSITIONS_H
