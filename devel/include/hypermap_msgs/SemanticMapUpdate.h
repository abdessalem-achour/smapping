// Generated by gencpp from file hypermap_msgs/SemanticMapUpdate.msg
// DO NOT EDIT!


#ifndef HYPERMAP_MSGS_MESSAGE_SEMANTICMAPUPDATE_H
#define HYPERMAP_MSGS_MESSAGE_SEMANTICMAPUPDATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hypermap_msgs/SemanticObject.h>
#include <hypermap_msgs/SemanticObject.h>

namespace hypermap_msgs
{
template <class ContainerAllocator>
struct SemanticMapUpdate_
{
  typedef SemanticMapUpdate_<ContainerAllocator> Type;

  SemanticMapUpdate_()
    : to_add()
    , to_modify()
    , updates()
    , to_delete()  {
    }
  SemanticMapUpdate_(const ContainerAllocator& _alloc)
    : to_add(_alloc)
    , to_modify(_alloc)
    , updates(_alloc)
    , to_delete(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::hypermap_msgs::SemanticObject_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >> _to_add_type;
  _to_add_type to_add;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _to_modify_type;
  _to_modify_type to_modify;

   typedef std::vector< ::hypermap_msgs::SemanticObject_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >> _updates_type;
  _updates_type updates;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _to_delete_type;
  _to_delete_type to_delete;





  typedef boost::shared_ptr< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct SemanticMapUpdate_

typedef ::hypermap_msgs::SemanticMapUpdate_<std::allocator<void> > SemanticMapUpdate;

typedef boost::shared_ptr< ::hypermap_msgs::SemanticMapUpdate > SemanticMapUpdatePtr;
typedef boost::shared_ptr< ::hypermap_msgs::SemanticMapUpdate const> SemanticMapUpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator1> & lhs, const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator2> & rhs)
{
  return lhs.to_add == rhs.to_add &&
    lhs.to_modify == rhs.to_modify &&
    lhs.updates == rhs.updates &&
    lhs.to_delete == rhs.to_delete;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator1> & lhs, const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hypermap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da8894bccdfde7741529f3941bb988c8";
  }

  static const char* value(const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda8894bccdfde774ULL;
  static const uint64_t static_value2 = 0x1529f3941bb988c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hypermap_msgs/SemanticMapUpdate";
  }

  static const char* value(const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SemanticObject[] to_add\n"
"uint32[] to_modify\n"
"SemanticObject[] updates\n"
"uint32[] to_delete\n"
"\n"
"================================================================================\n"
"MSG: hypermap_msgs/SemanticObject\n"
"int32 id\n"
"geometry_msgs/Polygon shape\n"
"geometry_msgs/Point position # should be centroid of shape\n"
"string name\n"
"string[] tags\n"
"float64[] confidence\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.to_add);
      stream.next(m.to_modify);
      stream.next(m.updates);
      stream.next(m.to_delete);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemanticMapUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hypermap_msgs::SemanticMapUpdate_<ContainerAllocator>& v)
  {
    s << indent << "to_add[]" << std::endl;
    for (size_t i = 0; i < v.to_add.size(); ++i)
    {
      s << indent << "  to_add[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >::stream(s, indent + "    ", v.to_add[i]);
    }
    s << indent << "to_modify[]" << std::endl;
    for (size_t i = 0; i < v.to_modify.size(); ++i)
    {
      s << indent << "  to_modify[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.to_modify[i]);
    }
    s << indent << "updates[]" << std::endl;
    for (size_t i = 0; i < v.updates.size(); ++i)
    {
      s << indent << "  updates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >::stream(s, indent + "    ", v.updates[i]);
    }
    s << indent << "to_delete[]" << std::endl;
    for (size_t i = 0; i < v.to_delete.size(); ++i)
    {
      s << indent << "  to_delete[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.to_delete[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYPERMAP_MSGS_MESSAGE_SEMANTICMAPUPDATE_H
