// Generated by gencpp from file hypermap_msgs/HypermapMetaData.msg
// DO NOT EDIT!


#ifndef HYPERMAP_MSGS_MESSAGE_HYPERMAPMETADATA_H
#define HYPERMAP_MSGS_MESSAGE_HYPERMAPMETADATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hypermap_msgs/LayerMetaData.h>

namespace hypermap_msgs
{
template <class ContainerAllocator>
struct HypermapMetaData_
{
  typedef HypermapMetaData_<ContainerAllocator> Type;

  HypermapMetaData_()
    : layer_cnt(0)
    , node_name()
    , layers()  {
    }
  HypermapMetaData_(const ContainerAllocator& _alloc)
    : layer_cnt(0)
    , node_name(_alloc)
    , layers(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _layer_cnt_type;
  _layer_cnt_type layer_cnt;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _node_name_type;
  _node_name_type node_name;

   typedef std::vector< ::hypermap_msgs::LayerMetaData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hypermap_msgs::LayerMetaData_<ContainerAllocator> >> _layers_type;
  _layers_type layers;





  typedef boost::shared_ptr< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> const> ConstPtr;

}; // struct HypermapMetaData_

typedef ::hypermap_msgs::HypermapMetaData_<std::allocator<void> > HypermapMetaData;

typedef boost::shared_ptr< ::hypermap_msgs::HypermapMetaData > HypermapMetaDataPtr;
typedef boost::shared_ptr< ::hypermap_msgs::HypermapMetaData const> HypermapMetaDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator1> & lhs, const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator2> & rhs)
{
  return lhs.layer_cnt == rhs.layer_cnt &&
    lhs.node_name == rhs.node_name &&
    lhs.layers == rhs.layers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator1> & lhs, const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hypermap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5befb9e9353d4c71ff05aaa102cd721a";
  }

  static const char* value(const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5befb9e9353d4c71ULL;
  static const uint64_t static_value2 = 0xff05aaa102cd721aULL;
};

template<class ContainerAllocator>
struct DataType< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hypermap_msgs/HypermapMetaData";
  }

  static const char* value(const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 layer_cnt\n"
"string node_name\n"
"LayerMetaData[] layers\n"
"\n"
"================================================================================\n"
"MSG: hypermap_msgs/LayerMetaData\n"
"string class_name\n"
"string name\n"
"string frame_id\n"
"bool subscribe_mode\n"
"bool enable_update\n"
"bool publish_global_topics\n"
;
  }

  static const char* value(const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.layer_cnt);
      stream.next(m.node_name);
      stream.next(m.layers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HypermapMetaData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hypermap_msgs::HypermapMetaData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hypermap_msgs::HypermapMetaData_<ContainerAllocator>& v)
  {
    s << indent << "layer_cnt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.layer_cnt);
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node_name);
    s << indent << "layers[]" << std::endl;
    for (size_t i = 0; i < v.layers.size(); ++i)
    {
      s << indent << "  layers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hypermap_msgs::LayerMetaData_<ContainerAllocator> >::stream(s, indent + "    ", v.layers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYPERMAP_MSGS_MESSAGE_HYPERMAPMETADATA_H
