// Generated by gencpp from file hypermap_msgs/SemanticObject.msg
// DO NOT EDIT!


#ifndef HYPERMAP_MSGS_MESSAGE_SEMANTICOBJECT_H
#define HYPERMAP_MSGS_MESSAGE_SEMANTICOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Point.h>

namespace hypermap_msgs
{
template <class ContainerAllocator>
struct SemanticObject_
{
  typedef SemanticObject_<ContainerAllocator> Type;

  SemanticObject_()
    : id(0)
    , shape()
    , position()
    , name()
    , tags()
    , confidence()  {
    }
  SemanticObject_(const ContainerAllocator& _alloc)
    : id(0)
    , shape(_alloc)
    , position(_alloc)
    , name(_alloc)
    , tags(_alloc)
    , confidence(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _shape_type;
  _shape_type shape;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _tags_type;
  _tags_type tags;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::hypermap_msgs::SemanticObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hypermap_msgs::SemanticObject_<ContainerAllocator> const> ConstPtr;

}; // struct SemanticObject_

typedef ::hypermap_msgs::SemanticObject_<std::allocator<void> > SemanticObject;

typedef boost::shared_ptr< ::hypermap_msgs::SemanticObject > SemanticObjectPtr;
typedef boost::shared_ptr< ::hypermap_msgs::SemanticObject const> SemanticObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hypermap_msgs::SemanticObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hypermap_msgs::SemanticObject_<ContainerAllocator1> & lhs, const ::hypermap_msgs::SemanticObject_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.shape == rhs.shape &&
    lhs.position == rhs.position &&
    lhs.name == rhs.name &&
    lhs.tags == rhs.tags &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hypermap_msgs::SemanticObject_<ContainerAllocator1> & lhs, const ::hypermap_msgs::SemanticObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hypermap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::SemanticObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::SemanticObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::SemanticObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "050ac2886725844d8ee5ca593780131d";
  }

  static const char* value(const ::hypermap_msgs::SemanticObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x050ac2886725844dULL;
  static const uint64_t static_value2 = 0x8ee5ca593780131dULL;
};

template<class ContainerAllocator>
struct DataType< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hypermap_msgs/SemanticObject";
  }

  static const char* value(const ::hypermap_msgs::SemanticObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"geometry_msgs/Polygon shape\n"
"geometry_msgs/Point position # should be centroid of shape\n"
"string name\n"
"string[] tags\n"
"float64[] confidence\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hypermap_msgs::SemanticObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.shape);
      stream.next(m.position);
      stream.next(m.name);
      stream.next(m.tags);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemanticObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hypermap_msgs::SemanticObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hypermap_msgs::SemanticObject_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "shape: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.shape);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "tags[]" << std::endl;
    for (size_t i = 0; i < v.tags.size(); ++i)
    {
      s << indent << "  tags[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tags[i]);
    }
    s << indent << "confidence[]" << std::endl;
    for (size_t i = 0; i < v.confidence.size(); ++i)
    {
      s << indent << "  confidence[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.confidence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYPERMAP_MSGS_MESSAGE_SEMANTICOBJECT_H
