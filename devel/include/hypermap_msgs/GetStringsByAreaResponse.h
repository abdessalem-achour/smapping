// Generated by gencpp from file hypermap_msgs/GetStringsByAreaResponse.msg
// DO NOT EDIT!


#ifndef HYPERMAP_MSGS_MESSAGE_GETSTRINGSBYAREARESPONSE_H
#define HYPERMAP_MSGS_MESSAGE_GETSTRINGSBYAREARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace hypermap_msgs
{
template <class ContainerAllocator>
struct GetStringsByAreaResponse_
{
  typedef GetStringsByAreaResponse_<ContainerAllocator> Type;

  GetStringsByAreaResponse_()
    : names()
    , locations()  {
    }
  GetStringsByAreaResponse_(const ContainerAllocator& _alloc)
    : names(_alloc)
    , locations(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _names_type;
  _names_type names;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _locations_type;
  _locations_type locations;





  typedef boost::shared_ptr< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetStringsByAreaResponse_

typedef ::hypermap_msgs::GetStringsByAreaResponse_<std::allocator<void> > GetStringsByAreaResponse;

typedef boost::shared_ptr< ::hypermap_msgs::GetStringsByAreaResponse > GetStringsByAreaResponsePtr;
typedef boost::shared_ptr< ::hypermap_msgs::GetStringsByAreaResponse const> GetStringsByAreaResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator1> & lhs, const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator2> & rhs)
{
  return lhs.names == rhs.names &&
    lhs.locations == rhs.locations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator1> & lhs, const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hypermap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edbe0cb3b8fce1c551c1862dc36469af";
  }

  static const char* value(const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedbe0cb3b8fce1c5ULL;
  static const uint64_t static_value2 = 0x51c1862dc36469afULL;
};

template<class ContainerAllocator>
struct DataType< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hypermap_msgs/GetStringsByAreaResponse";
  }

  static const char* value(const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] names\n"
"geometry_msgs/Point[] locations\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.names);
      stream.next(m.locations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetStringsByAreaResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hypermap_msgs::GetStringsByAreaResponse_<ContainerAllocator>& v)
  {
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "locations[]" << std::endl;
    for (size_t i = 0; i < v.locations.size(); ++i)
    {
      s << indent << "  locations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.locations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYPERMAP_MSGS_MESSAGE_GETSTRINGSBYAREARESPONSE_H
