// Generated by gencpp from file hypermap_msgs/GetIntAtPointRequest.msg
// DO NOT EDIT!


#ifndef HYPERMAP_MSGS_MESSAGE_GETINTATPOINTREQUEST_H
#define HYPERMAP_MSGS_MESSAGE_GETINTATPOINTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace hypermap_msgs
{
template <class ContainerAllocator>
struct GetIntAtPointRequest_
{
  typedef GetIntAtPointRequest_<ContainerAllocator> Type;

  GetIntAtPointRequest_()
    : layer()
    , location()  {
    }
  GetIntAtPointRequest_(const ContainerAllocator& _alloc)
    : layer(_alloc)
    , location(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _layer_type;
  _layer_type layer;

   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _location_type;
  _location_type location;





  typedef boost::shared_ptr< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetIntAtPointRequest_

typedef ::hypermap_msgs::GetIntAtPointRequest_<std::allocator<void> > GetIntAtPointRequest;

typedef boost::shared_ptr< ::hypermap_msgs::GetIntAtPointRequest > GetIntAtPointRequestPtr;
typedef boost::shared_ptr< ::hypermap_msgs::GetIntAtPointRequest const> GetIntAtPointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator1> & lhs, const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.layer == rhs.layer &&
    lhs.location == rhs.location;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator1> & lhs, const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hypermap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04a0a3523554242165dadba5fbb29ee3";
  }

  static const char* value(const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04a0a35235542421ULL;
  static const uint64_t static_value2 = 0x65dadba5fbb29ee3ULL;
};

template<class ContainerAllocator>
struct DataType< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hypermap_msgs/GetIntAtPointRequest";
  }

  static const char* value(const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string layer\n"
"geometry_msgs/PointStamped location\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.layer);
      stream.next(m.location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIntAtPointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hypermap_msgs::GetIntAtPointRequest_<ContainerAllocator>& v)
  {
    s << indent << "layer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.layer);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYPERMAP_MSGS_MESSAGE_GETINTATPOINTREQUEST_H
