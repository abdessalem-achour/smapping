// Generated by gencpp from file hypermap_msgs/GetIntsByAreaResponse.msg
// DO NOT EDIT!


#ifndef HYPERMAP_MSGS_MESSAGE_GETINTSBYAREARESPONSE_H
#define HYPERMAP_MSGS_MESSAGE_GETINTSBYAREARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace hypermap_msgs
{
template <class ContainerAllocator>
struct GetIntsByAreaResponse_
{
  typedef GetIntsByAreaResponse_<ContainerAllocator> Type;

  GetIntsByAreaResponse_()
    : values()
    , locations()  {
    }
  GetIntsByAreaResponse_(const ContainerAllocator& _alloc)
    : values(_alloc)
    , locations(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _values_type;
  _values_type values;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _locations_type;
  _locations_type locations;





  typedef boost::shared_ptr< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetIntsByAreaResponse_

typedef ::hypermap_msgs::GetIntsByAreaResponse_<std::allocator<void> > GetIntsByAreaResponse;

typedef boost::shared_ptr< ::hypermap_msgs::GetIntsByAreaResponse > GetIntsByAreaResponsePtr;
typedef boost::shared_ptr< ::hypermap_msgs::GetIntsByAreaResponse const> GetIntsByAreaResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator1> & lhs, const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator2> & rhs)
{
  return lhs.values == rhs.values &&
    lhs.locations == rhs.locations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator1> & lhs, const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hypermap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d1f620b409a69e5912a510651e4be2b";
  }

  static const char* value(const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d1f620b409a69e5ULL;
  static const uint64_t static_value2 = 0x912a510651e4be2bULL;
};

template<class ContainerAllocator>
struct DataType< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hypermap_msgs/GetIntsByAreaResponse";
  }

  static const char* value(const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] values\n"
"geometry_msgs/Point[] locations\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.values);
      stream.next(m.locations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIntsByAreaResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hypermap_msgs::GetIntsByAreaResponse_<ContainerAllocator>& v)
  {
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.values[i]);
    }
    s << indent << "locations[]" << std::endl;
    for (size_t i = 0; i < v.locations.size(); ++i)
    {
      s << indent << "  locations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.locations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYPERMAP_MSGS_MESSAGE_GETINTSBYAREARESPONSE_H
